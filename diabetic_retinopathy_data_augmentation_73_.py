# -*- coding: utf-8 -*-
"""Diabetic Retinopathy data augmentation 73%.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HlHogCN0UxxknFMeR3jDQvmh4Ooh65QK
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d sovitrath/diabetic-retinopathy-2015-data-colored-resized

import zipfile
zip_ref = zipfile.ZipFile('/content/diabetic-retinopathy-2015-data-colored-resized.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

import os
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.applications import ResNet50

conv_base = ResNet50(
    weights='imagenet',
    include_top = False,
    input_shape=(224,224,3)
)

model = Sequential()

model.add(conv_base)
model.add(Flatten())
model.add(Dense(256,activation='relu'))
model.add(Dense(5,activation='softmax'))

conv_base.trainable = False

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import array_to_img, img_to_array
from tensorflow.keras.preprocessing.image import load_img

from tensorflow.keras.preprocessing.image import ImageDataGenerator

batch_size = 32

train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    validation_split=0.2  # Move validation_split here
)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    directory='/content/colored_images/colored_images',
    subset="training",  # Specify "training" subset
    seed=123,
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode='categorical'
)

validation_generator = train_datagen.flow_from_directory(
    directory='/content/colored_images/colored_images',
    subset="validation",  # Specify "validation" subset
    seed=123,
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode='categorical'
)

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

# Assuming your model is already defined and compiled
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Training the model
history = model.fit(
    train_generator,
    epochs=10,
    validation_data=validation_generator
)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'],color='red',label='train')
plt.plot(history.history['val_accuracy'],color='blue',label='validation')
plt.legend()
plt.show()

plt.plot(history.history['loss'],color='red',label='train')
plt.plot(history.history['val_loss'],color='blue',label='validation')
plt.legend()
plt.show()

