# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1akMC3-iHECQ-jttf0dHgTVa0PNmsCpoc
"""

import zipfile
zip_ref = zipfile.ZipFile('/content/balanced_data.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

import matplotlib.pyplot as plt
import numpy as np
import os
import PIL
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.python.keras.layers import Dense, Flatten
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam

import tensorflow
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense,Flatten
from keras.applications import EfficientNetB7

conv_base = EfficientNetB7(
    weights='imagenet',
    include_top = False,
    input_shape=(150,150,3)
)

conv_base.summary()

model = Sequential()

model.add(conv_base)
model.add(Flatten())
model.add(Dense(256,activation='relu'))
model.add(Dense(5,activation='softmax'))
model.build(input_shape=(None,150, 150, 3))

model.summary()

conv_base.trainable = False

# generators
train_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/balanced_data',
    validation_split=0.2,
    subset="training",
    seed = 123,

    labels='inferred',
    label_mode = 'categorical',
    batch_size=32,
    image_size=(150,150)
)

validation_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/balanced_data',
    validation_split=0.2,
    subset="validation",
    seed = 123,

    labels='inferred',
    label_mode = 'categorical',
    batch_size=32,
    image_size=(150,150)
)

# Normalize
def process(image,label):
    image = tensorflow.cast(image/255. ,tensorflow.float32)
    return image,label

train_ds = train_ds.map(process)
validation_ds = validation_ds.map(process)

model.compile(optimizer='Adam',loss='categorical_crossentropy',metrics=['accuracy'])

history = model.fit(train_ds,epochs=10,validation_data=validation_ds)

